<?php

/**
 * @file
 * Contains custom_views_argument.module.
 */

/**
 * Implements hook_views_data_alter().
 *
 * {@see hook_views_data_alter}
 */
function matomo_views_integrations_views_data_alter(array &$data) {
  if (isset($data["node_field_data"]["nid"])) {
    $data['node_field_data']['nid_matomo_dimension'] = [
      'title' => t('Matomo Dimension Filter'),
      'group' => t('Content'),
      'filter' => [
        'title' => t('Matomo Dimension ID Filter'),
        'help' => t('Filter node id based on Matomo Dimension results'),
        'field' => 'nid',
        'id' => 'matomo_views_dimension',
      ],
    ];
  }
}

/**
 * Implements hook_views_data().
 */
function matomo_views_integrations_views_data() {
  $data = [
    'matomo_views_dimension' => [
      'table' => [
        'group' => 'Matomo Dimension',
        'base' => [
          'title' => t('Matomo Dimension'),
          'help' => t('Queries Matomo'),
          'query_id' => 'matomo_views_integrations_dimension',
        ],
      ],
      'label' => [
        'title' => t('Label'),
        'help' => t('Label field returned by Matomo API'),
        'field' => ['id' => 'matomo_views_dimension_standard',],
        'sort' => ['id' => 'matomo_views_dimension_standard',],
      ],
      'url' => [
        'title' => t('Url'),
        'help' => t('Url field returned by Matomo API'),
        'field' => [
          'id' => 'matomo_views_dimension_standard',
          'real field' => 'Actions_PageUrl',
        ],
        'sort' => ['id' => 'matomo_views_dimension_standard',],
      ],
      'node' => [
        'title' => t('Node'),
        'help' => t('Node field returned by Matomo API'),
        'field' => ['id' => 'matomo_views_dimension_standard',],
      ],
      'node_target_id' => [
        'title' => t('Node target'),
        'help' => t('Node field returned by Matomo API'),
        'field' => [
          'id' => 'matomo_views_dimension_node_target_id',
          'real field' => 'label',
        ],
      ],
      'rendered_item' => [
        'title' => t('Rendered item'),
        'help' => t('Rendered item from Matomo API'),
        'field' => [
          'id' => 'matomo_views_integrations_rendered_item',
        ],
      ],
    ],
    'matomo_views_pageurls' => [
      'table' => [
        'group' => 'Matomo PageUrls',
        'base' => [
          'title' => t('Matomo PageUrls'),
          'help' => t('Queries Matomo'),
            'query_id' => 'matomo_views_integrations_pageurls',
        ],
      ],
      'label' => [
        'title' => t('Label'),
        'help' => t('Label field returned by Matomo API'),
        'field' => ['id' => 'matomo_views_dimension_standard',],
        'sort' => ['id' => 'matomo_views_dimension_standard',],
      ],
    ],
  ];


  $entity_type_manager = Drupal::entityTypeManager();

  // Add a relationship to the target entity type.
  $target_entity_type_id = 'node';
  $target_entity_type = $entity_type_manager->getDefinition($target_entity_type_id);
  $target_base_table = $target_entity_type->getDataTable() ?: $target_entity_type->getBaseTable();
  //$field_name = $field_storage->getName();

  $data['matomo_views_dimension']['nid']['relationship'] = [
    'title' => 'relationship',
    'label' => 'label',
    'group' => 'Content',
    'help' => 'test',
    'id' => 'node',
    'base' => $target_base_table,
    'entity type' => $target_entity_type_id,
    'base field' => $target_entity_type->getKey('id'),
  ];

  return $data;
}
